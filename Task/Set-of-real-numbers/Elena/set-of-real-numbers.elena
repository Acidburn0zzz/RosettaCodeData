import extensions.

extension setOp
{
    union : func
        = (:val)( self eval:val || func eval:val ).

    intersection : func
        = (:val)( self eval:val && func eval:val ).

    difference : func
        = (:val)( self eval:val && func eval:val; not ).
}

program =
[
    // union
    var set := (:x)( (x >= 0.0r) && (x <= 1.0r) ) union(:x)( (x >= 0.0r) && (x < 2.0r) ).

    set eval:0.0r; assertTrue.
    set eval:1.0r; assertTrue.
    set eval:2.0r; assertFalse.

    // intersection
    var set2 := (:x)( (x >= 0.0r) && (x < 2.0r) ) intersection(:x)( (x >= 1.0r) && (x <= 2.0r) ).

    set2 eval:0.0r; assertFalse.
    set2 eval:1.0r; assertTrue.
    set2 eval:2.0r; assertFalse.

    // difference
    var set3 := (:x)( (x >= 0.0r) && (x < 3.0r) ) difference(:x) ( (x >= 0.0r) && (x <= 1.0r) ).

    set3 eval:0.0r; assertFalse.
    set3 eval:1.0r; assertFalse.
    set3 eval:2.0r; assertTrue.
].
