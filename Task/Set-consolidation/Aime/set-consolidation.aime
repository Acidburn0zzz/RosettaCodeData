void
display(list l)
{
    integer i;
    record r;
    text s;

    for (i, r in l) {
        text u, v;

        o_text(s);
        s = ", ";
        o_text("{");
        for (u in r) {
            o_text(v);
            v = ", ";
            o_text(u);
        }
        o_text("}");
    }

    o_text("\n");
}

integer
intersect(record r, record u)
{
    integer a;
    text s;

    a = 0;
    for (s in r) {
        if (r_key(u, s)) {
            a = 1;
            break;
        }
    }

    return a;
}

void
merge(record u, record r)
{
    r_wcall(r, r_add, 1, 2, u);
}

list
consolidate(list l)
{
    integer i;
    record r;

    for (i, r in l) {
        integer j;

        j = i - ~l + 1;
        while (j) {
            record u;

            u = l[j];
            j += 1;
            if (intersect(r, u)) {
                merge(u, r);
                l_delete(l, i);
                i -= 1;
                break;
            }
        }
    }

    return l;
}

list
L(...)
{
    return xcall(l_assemble);
}

record
R(...)
{
    record r;

    ucall(r_p_integer, 1, r, 0);

    return r;
}

integer
main(void)
{
    display(consolidate(L(R("A", "B"), R("C", "D"))));
    display(consolidate(L(R("A", "B"), R("B", "D"))));
    display(consolidate(L(R("A", "B"), R("C", "D"), R("D", "B"))));
    display(consolidate(L(R("H", "I", "K"), R("A", "B"), R("C", "D"),
                          R("D", "B"), R("F", "G", "K"))));

    return 0;
}
