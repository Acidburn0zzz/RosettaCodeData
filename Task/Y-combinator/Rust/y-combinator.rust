//! A simple implementation of the Y Combinator
// λf.(λx.xx)(λx.f(xx))
// <=> λf.(λx.f(xx))(λx.f(xx))

// CREDITS: A better version of the previous code that was posted here, with detailed explanation.
// See <y> and also <y_apply>.

// A function type that takes its own type as an input is an infinite recursive type.
// We introduce a trait that will allow us to have an input with the same type as self, and break the recursion.
// The input is going to be a trait object that implements the desired function in the interface.
// NOTE: We will be coercing a reference to a closure into this trait object.
trait Apply<T, R> {
    fn apply( &self, &Apply<T, R >, T ) -> R;
}

impl<T, R, F> Apply<T, R> for F where F: Fn( &Apply<T, R>, T ) -> R {
    fn apply( &self, f: &Apply<T, R>, t: T ) -> R {
        self( f, t )

        // If we were to pass in self as f, we get -
        // NOTE: Each letter is an individual symbol.
        // λf.λt.sft
        // => λs.λt.sst [s/f]
        // => λs.ss
    }
}

// Here you take a reference to the function you want to recurse, AND the input, and return the result.
// But, you are NOT <returning> a recursive version of the given function...
// You CAN, of course, wrap this in a closure.
fn y_apply<T, R, F>( f: &F, t: T ) -> R where F: Fn( &Fn( T ) -> R, T ) -> R {
    ( &|x: &Apply<T, R>, y| x.apply( x, y ) )
    .apply( &|x: &Apply<T, R>, y| f( &|z| x.apply( x, z ), y ), t )

    // NOTE: Each letter is an individual symbol.
    // (λx.(λy.xxy))(λx.(λy.f(λz.xxz)y))t
    // => (λx.xx)(λx.f(xx))t
    // => (Yf)t
}

// The static lifetime bounds on the type parameters 'T' and 'R' guarantee that those types will not -
// - contain any references that will have a lifetime less than 'static.
// If the types are allowed to have references that have a lifetime shorter than 'static, those references -
// - may become invalid while you still you have the returned value.
// You need to have the lifetimes be 'static, because, unlike before, you RETURN a recursive version of the function...
fn y<T: 'static, R: 'static>( f: Box<Fn( &Fn( T ) -> R, T ) -> R> ) -> Box<Fn( T ) -> R> {
    Box::new( move |t: T| ( &|x: &Apply<T, R>, y| x.apply( x, y ) )
                          .apply( &|x: &Apply<T, R>, y| f( &|z| x.apply( x, z ), y ), t ) )

      // NOTE: Each letter is an individual symbol.
      // (λt(λx.(λy.xxy))(λx.(λy.f(λz.xxz)y)))t
      // => (λx.xx)(λx.f(xx))
      // => Yf
}

fn fac( n: usize ) -> usize {
    let almost_fac = Box::new( |f: &Fn( usize ) -> usize, x| if x == 0 { 1 } else { x * f( x - 1 ) } );
    let fac = y( almost_fac );
    fac( n )
}

fn fib( n: usize ) -> usize {
    let almost_fib = Box::new( |f: &Fn( usize ) -> usize, x| if x < 2 { x } else { f( x - 2 ) + f( x - 1 ) } );
    let fib = y( almost_fib );
    fib( n )
}

fn main() {
    println!( "{}", fac( 10 ) );
    println!( "{}", fib( 10 ) );
}
